<?php

namespace App\Http\Controllers;

use App\Models\Task;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class TaskController extends Controller
{
    // CrÃ©ation de la mÃ©thode list
    public function list()
    {
        // Utilisation de la mÃ©thode all() grÃ¢ce Ã  l'hÃ©ritage
        $tasks = Task::all()->load('category', 'tags'); // RÃ©cupÃ©rer la liste des tasks avec le nom de leur catÃ©gorie + tags
        // Retour automatique au format JSON ðŸ‘Œ

        if ($tasks) {
            return $tasks;
        } else {
            return response(null, 404);
        }
    }

    // CrÃ©ation de la mÃ©thode show($id)
    public function show($id)
    {
        // Utilisation de la mÃ©thode find($id) grÃ¢ce Ã  l'hÃ©ritage
        $task = Task::findOrFail($id)->load('category', 'tags'); // RÃ©cupÃ©rer la liste des tasks avec le nom de leur catÃ©gorie + tags
        // Retour auto au format JSON
        // $tag = Tag::findOrFail($id);
        // foreach ($tag->tasks as $task) {
        //     return $task->tag;
        // }
        return $task;

        // return $task;
        // return $task->category->name; renvoie le nom de la catÃ©gorie liÃ©e Ã  cette tÃ¢che
    }

    // CrÃ©ation de la mÃ©thode create
    public function create(Request $request)
    {
        // Dans la variable $validator, je mets le rÃ©sultat d'une vÃ©rification de l'input title et category_id
        // avec l'outil Facade Validator on vÃ©rifie :
            // existence de $title et $category_id : 'required'
            // not empty : 'filled'
        $validator = Validator::make($request->input(), [
            'title' => ['required', 'filled'],
            'category_id' => ['required', 'filled']
        ]);

            // Si validation ko
        if ($validator->fails()) {
            // si ko = code HTTP 422 avec un message d'erreur
            return response()->json($validator->errors(), 422);
        }

        // Extraction des valeurs passÃ©es de la body de la requÃªte
        $title = $request->input('title');
        $category_id = $request->input('category_id');

        // On crÃ©e une nouvelle instance, puis on lui dÃ©finit la propriÃ©tÃ© title et category_id
        $task = new Task();
        $task->title = $title;
        $task->category_id = $category_id;

        // On sauvegarde, puis on gÃ¨re la rÃ©ponse avec le code HTTP qui convient
        // 201 : Created
        // 500 : Internal Server Error
        $task->saveOrFail();
        return $task;
    }

    // MÃ©thode pour modifier les propriÃ©tÃ©s correspondant Ã  1 id dans la bdd
    public function update(Request $request, $id)
    {
        // recherche objet Ã  modifier
        $task = Task::findOrFail($id);

        // Dans la variable $validator, je mets le rÃ©sultat d'une vÃ©rification de l'input title
        // avec l'outil Facade Validator on vÃ©rifie :
            // existence de $title : 'required'
            // not empty : 'filled'
            $validator = Validator::make($request->input(), [
                'title' => ['required', 'filled'],
                'category_id' => ['required', 'filled']
            ]);

            if ($validator->fails()) {
                return response()->json($validator->errors(), 422);
            }

        // Extraction des valeurs passÃ©es de la body Ã  la requÃªte
        $title = $request->input('title');
        $category_id = $request->input('category_id');

        // set de la valeur de la propriÃ©tÃ© $title et $category_id
        $task->title = $title;
        $task->category_id = $category_id;

        $task->updateOrFail();
        return $task;
    }

    // CrÃ©ation mÃ©thode delete
    public function delete($id)
    {
        // recherche objet Ã  modifier
        $task = Task::findOrFail($id);
        // suppression dans la BDD
        // rÃ©ponse HTTP : 200 -> Delete
        // rÃ©ponse HTTP : 500 -> Internal Server Error
        $task->deleteOrFail();
        return $task;
    }
}
